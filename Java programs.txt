1.Fibonacci:
class Main {
  public static void main(String[] args) {

    int n = 10, a = 0, b = 1;
    System.out.println("Fibonacci Series till " + n + " terms:");

    for (int i = 1; i <= n; i++) {
      System.out.print(a + "  ");

      // compute the next term
      int c = a + b;
      a = b;
      b = c;
    }
  }
}

O/p:
Fibonacci Series till 10 terms:
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 
---------------------------
2.String occurance:
public class Main
{
  public static void main(String args[]) 
  {
  String str = "aaaabbccAAdd";
  char search = 'a';
  int count=0;
  for(int i=0; i<str.length(); i++)
  {
      if(str.charAt(i) == search)
      count++;
  }
  System.out.println("The Character "+search+" appears "+count+" times.");
  }
}

O/p:The Character 'a' appears 4 times.
------------------------------
Write a program to calculate the total number of characters in the String?
public class Main
{
    public static void main(String[] args) 
    {    
       String str = "im good";    
       int count = 0;        
      
       //Count total characters in the given string except space    
       for(int i = 0; i < str.length(); i++) 
          {    
             if(str.charAt(i) != ' ')    
             count++;    
          }                
       
       //Display total number of characters in the given string    
       System.out.println("The total number of characters in the given string: " + count);    
    }      
}

O/p:

The total number of characters in the given string: 6
------------------------
3.Reverse of a string:
class Main{
    public static void main (String[] args) {
       
        String str= "Geeks", nstr="";
        char ch;
       
      for (int i=0; i<str.length(); i++)
      {
        ch= str.charAt(i); //extracts each character
        nstr= ch+nstr; //adds each character in front of the existing string
      }
      System.out.println("Reversed word: "+ nstr);
    }
}
O/p:
Original word: Geeks
Reversed word: skeeG
--------------------------

------------------------
4.Vowels and consonants:
public class Main
{
    public static void main(String[] args)
    {
        int vowels=0, consonants=0, digits=0, spaces=0;
        String line="This is a apple";
        line=line.toLowerCase();
        for(int i=0;i<line.length();i++)
        {
        char ch=line.charAt(i);
        if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u')
        {
            vowels++;
        }
        else if(ch>='a' && ch<='z')
        {
            consonants++;
        }
        else if(ch>='0' && ch<='9')
        {
            digits++;
        }
        else if(ch== ' ')
        {
            spaces++;
        }
    }
    System.out.println("Vowels :" +vowels);
    System.out.println("Consonants :" +consonants);
    System.out.println("Digits: " +digits);
    System.out.println("Spaces: " +spaces);
}
}



O/p:
Vowels: 5
Consonants: 7
Digits: 0
White spaces: 3
-------------------------
5.Java program to prove Strings are Immutable:
class Main {
	public static void main(String args[]) {
		// Your code goes here
		String s1 = "InterviewBit";
		String s2 = s1;

		System.out.println(s1 == s2); //they are equal

		s1 += "Scaler";

		System.out.println(s1 == s2); //not equal
	}
} 

O/p:
true
false
-------------------
6.Binary search

public class Main{
    public static void binarysearch(int arr[], int first, int last, int key){
        int mid=(first+last)/2;
        while(first<=last)
        {
            if(arr[mid]<key)
            {
                first=mid+1;
            }
            else if(arr[mid]==key)
            {
                System.out.println("Elemen is found at index:" +mid);
                break;
            }
            else
            {
                last=mid-1;
            }
            mid=(first+last)/2;
        }
        if(first>last)
        {
            System.out.println("No element found");
        }
        }
        public static void main(String args[])
        {
            int arr[] = {10,20,30,40,50};
            int key=30;
            int last=arr.length-1;
            binarysearch(arr,0,last,key);
        }
}

O/p:
Elemen is found at index:2

7. Java Program to Swap Two values using third variable

public class Main{
    public static void swapValues(int m, int n)
    {
        int temp=m;
        m=n;
        n=temp;
        System.out.println("Value of m is" +m 
        
        + "and value of n is" +n);
    }
    public static void main(String args[])
    {
        int m=5, n=9;
        swapValues(m,n);
    }
}

o/p: Value of m is9and value of n is5

8. Java Program to Swap Two values without using third variable
public class Main{
    public static void swapValues(int m, int n)
    {
        m=m-n;
        n=m+n;
        m=n-m;
        System.out.println("Value of m is" +m 
        
        + "and value of n is" +n);
    }
    public static void main(String args[])
    {
        int m=5, n=9;
        swapValues(m,n);
    }
}

o/p:Value of m is9and value of n is5
-------------------------
 How can we remove a specific character from a String?
public class Main
{
  public static void main(String args[]) 
    {
      String str = "Scaler by InterviewBit";
     
      //remove the specified character.
      System.out.println("String after removing 'e' = "+str.replace("e", ""));    
     //remove the first occurrence of the specified character.
     System.out.println("String after removing First 'e' = "+str.replaceFirst("e", ""));   

    //remove all occurrences of the specified character.
  System.out.println("String after removing all capital letters = "+str.replaceAll("([A-Z])", "")); 
  }
}
O/p:
String after removing 'e' = Scalr by IntrviwBit
String after removing First 'e' = Scalr by InterviewBit
String after removing all capital letters = caler by nterviewit

----------------------------
8) Write a Java Program to find whether a string or number is palindrome or not.
import java.util.Scanner;
 
public class Main {
    public static void main (String[] args) {
        String original, reverse = "";
        Scanner in = new Scanner(System.in);
        int length;
        System.out.println("Enter the number or String");
        original = in.nextLine();
        length = original.length();
        for (int i =length -1; i>=0; i--) {
            reverse = reverse + original.charAt(i);
        }
        System.out.println("reverse is:" +reverse);
         
        if(original.equals(reverse)) 
            System.out.println("The number is palindrome");
        else
            System.out.println("The number is not a palindrome");
         
    }
}
O/p:
Enter the number or String
madam
reverse is:madam
The number is palindrome
------------------------------------
In Java, how do you convert a string to an integer and vice versa?

public class StringtoInteger {
  public static void main(String args[]) 
  {
     String str1 = "1296";
     int  i= Integer.parseInt(str1);
     System.out.println(i);
     String str2 = Integer.toString(i);
     System.out.println(str2);
  }
}

O/p:
1296
1296

---------------------------------------------
How to convert an Array to String in Java?
An array can be converted to a string in four different ways such as Arrays.toString() method, String.Join() method, StringBuilder.append() method, 
and Collectors.joining() method. Here, we will see an example of the Array.toString() method.
import java.util.Arrays;
public class Main 
{
     public static void main(String[] args) 
     {
          String[] strArray = { "Scaler", "by", "InterviewBit"};
          String str1 = ConvertArraytoString(strArray);
       System.out.println("An array converted to a string: " + str1);
     }
     // Using the Arrays.toString() method
     public static String ConvertArraytoString(String[] strArray) 
     {
       return Arrays.toString(strArray);
     }
}

o/p:
An array converted to a string: [Scaler, by, InterviewBit]
--------------------------------
How to print all permutations of string in Java?
public class InterviewBit {

   // Function to display all permutations of the string str
  public static void printallPermutns(String str, String str2)
   {
       // check if string is empty or null
       if (str.length() == 0) 
         {
           System.out.print(str2 + " ");
           return;
         }
      
       for (int i = 0; i < str.length(); i++) 
         { 
           // ith character of str
           char ch = str.charAt(i); 
           // Rest of the string after excluding
           // the ith character
           String str3 = str.substring(0, i) + str.substring(i + 1);
           // Recursive call
           printallPermutns(str3, str2 + ch);
        }
   } 
   // Driver code
   public static void main(String[] args)
   {
       String s = "cat";
       printallPermutns(s, "");
   }
}
Output: 

cat cta act atc tca tac
---------------------------------------
In what way should two strings be compared to determine whether they are anagrams?
import java.util.Arrays;
public class Main 
{
    public static void main(String[] args) 
    {
        String str1="Bored";
        String str2="Robed";
        str1=str1.toLowerCase();
        str2=str2.toLowerCase();
        if(str1.length()==str2.length())
        {
           char[] str1charArray = str1.toCharArray();
           char[] str2charArray = str2.toCharArray();
           Arrays.sort(str1charArray);
           Arrays.sort(str2charArray);
        boolean result=Arrays.equals(str1charArray, str2charArray);
        if(result)
        {
            System.out.println(""+str1+" and "+str2+" are anagrams of each other");
        }
        else
        {
             System.out.println(""+str1+" and "+str2+" are not anagrams of each other");
        }
        }
        else{
             System.out.println(""+str1+" and "+str2+" are not anagrams of each other");
        }
    }
}
o/p:
bored and robed are anagrams of each other