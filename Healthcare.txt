using System;
using System.Collections.Generic;

namespace HealthCare
{
    // Abstract class to represent a person
    abstract class Person
    {
        // Properties
        public string Name { get; set; }
        public int Age { get; set; }

        // Constructor
        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }

        // Abstract method
        public abstract void DisplayDetails();

        // Method overloading
        public void DisplayDetails(string prefix)
        {
            Console.WriteLine($"{prefix} Name: {Name}, Age: {Age}");
        }
    }

    // Class to represent a Doctor
    class Doctor : Person
    {
        // Additional property
        public string Specialization { get; set; }

        // Constructor
        public Doctor(string name, int age, string specialization) : base(name, age)
        {
            Specialization = specialization;
        }

        // Method overriding
        public override void DisplayDetails()
        {
            Console.WriteLine($"Doctor - Name: {Name}, Age: {Age}, Specialization: {Specialization}");
        }
    }

    // Class to represent a Patient
    class Patient : Person
    {
        // Additional property
        public string Condition { get; set; }

        // Constructor
        public Patient(string name, int age, string condition) : base(name, age)
        {
            Condition = condition;
        }

        // Method overriding
        public override void DisplayDetails()
        {
            Console.WriteLine($"Patient - Name: {Name}, Age: {Age}, Condition: {Condition}");
        }
    }

    // Abstract class to manage medical records
    abstract class RecordManager
    {
        // Abstract methods
        public abstract void RegisterNewRecord(string name, int age, string condition);
        public abstract void DisplayRecords();
    }

    // Class to manage medical records
    class MedicalRecordManager : RecordManager
    {
        // List to store patients
        public List<Patient> Patients { get; } = new List<Patient>();

        // Method to register a new patient
        public override void RegisterNewRecord(string name, int age, string condition)
        {
            Patient newPatient = new Patient(name, age, condition);
            Patients.Add(newPatient);
            Console.WriteLine($"New patient registered: {name}");
        }

        // Method to display all patient records
        public override void DisplayRecords()
        {
            Console.WriteLine("Patients Details:");
            foreach (var patient in Patients)
            {
                patient.DisplayDetails();
            }
        }
    }

    // Class to manage appointments
    class AppointmentManager
    {
        // Method to schedule an appointment
        public void ScheduleAppointment(Patient patient, Doctor doctor, DateTime date)
        {
            if (patient == null || doctor == null)
            {
                Console.WriteLine("Error: Invalid patient or doctor provided for scheduling appointment.");
                return;
            }

            Console.WriteLine($"Appointment scheduled for {patient.Name} with {doctor.Name} on {date}");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            MedicalRecordManager medicalRecordManager = new MedicalRecordManager();
            AppointmentManager appointmentManager = new AppointmentManager();

            medicalRecordManager.RegisterNewRecord("Banny", 5, "Fever");
            medicalRecordManager.RegisterNewRecord("Virat", 15, "Fracture");

            Doctor doctor1 = new Doctor("Dr.RAJU", 40, "Cardiologist");
            Doctor doctor2 = new Doctor("Dr.RAHUL", 35, "Pediatrician");

            medicalRecordManager.DisplayRecords();

            appointmentManager.ScheduleAppointment(medicalRecordManager.Patients[0], doctor1, DateTime.Now.AddDays(3));
            appointmentManager.ScheduleAppointment(medicalRecordManager.Patients[1], doctor2, DateTime.Now.AddDays(5));

            // Keep console window open until a key is pressed
            Console.ReadKey();
        }
    }
}
