using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace POC
{
    abstract class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }

        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }

        public abstract void DisplayDetails();
        public abstract void Updateinfo();
    }

    class Doctor : Person
    {
        public string Specialization { get; set; }

        public Doctor(string name, int age, string specialization) : base(name, age)
        {
            Specialization = specialization;
        }


        public override void DisplayDetails()
        {
            Console.WriteLine($"Doctor: {Name}, Age: {Age}, Specialization: {Specialization}");
        }

        public override void Updateinfo()
        {
            Console.WriteLine($"Updated Doctor: {Name}, Age: {Age}, Specialization: {Specialization}");
        }
    }

    class Patient : Person
    {
        public string Condition { get; set; }

        public Patient(string name, int age, string condition) : base(name, age)
        {
            Condition = condition;
        }

        public override void DisplayDetails()
        {
            Console.WriteLine($"Patient: {Name}, Age: {Age}, Condition: {Condition}");
        }
        public override void Updateinfo()
        {
            Console.WriteLine($"updated Patient: {Name}, Age: {Age}, Condition: {Condition}");
        }
    }

    class MedicalRecordManager
    {
        public Queue<Patient> patients;

        public MedicalRecordManager()
        {
            patients = new Queue<Patient>();
        }

        // Method to register a new patient
        public void RegisterNewPatient(string name, int age, string condition)
        {
            Patient newPatient = new Patient(name, age, condition);
            patients.Enqueue(newPatient);
            Console.WriteLine($"New patient registered: {name}");
        }

        public void DisplayPatientsDetails()
        {
            Console.WriteLine("Patients Details:");
            foreach (var patient in patients)
            {
                patient.DisplayDetails();

            }
        }

    }

    class AppointmentManager
    {
        // Method to schedule appointment
        public void ScheduleAppointment(Patient patient, Doctor doctor, DateTime date)
        {
            Console.WriteLine($"Appointment scheduled for {patient.Name} with {doctor.Name} on {date}");
            Console.ReadKey();
        }
        // Method to cancel appointment

        public void cancelAppointment(Patient patient, Doctor doctor, DateTime date)
        {
            Console.WriteLine($"Appointment cancelled for {patient.Name} with {doctor.Name} on {date}");
            Console.ReadKey();
        }

    }


    class SaftyAndHygiene
    {
        public void performSanitizationForSurgery(Patient patient, Doctor doctor)
        {
            Console.WriteLine($"Sanitization performed for {patient.Name}");
            Console.ReadKey();
        }

        public bool performHandSanitization(Patient patient, Doctor doctor)
        {
            Console.WriteLine($"Hand Sanitization performed for {patient.Name}");
            Console.ReadKey();
            return true;
        }

        public void surgeryChecklist(Patient patient, Doctor doctor)
        {

                     //verify patient details
                     //get and verify the medical records
                      //allocate the doctor & assistent staff
                      //prepare required equipments
                      //perform sanitization for patient, equipents and staff 

            Console.WriteLine($"surgeryChecklist for {patient.Name}");
            Console.WriteLine($"1. verify patient details  2.get and verify the medical records   3.allocate the doctor&assistent staff" +
                $"  4.prepare required equipents     5. perform sanitization for patient, equipents and staff  ");

            Console.ReadKey();
        }
    }

    class SaftyAndHygieneValidation
    {
        public void isSanitinized(Patient patient, Doctor doctor, DateTime date)
        {
            Console.WriteLine($"Appointment scheduled for {patient.Name} with {doctor.Name} on {date}");
            Console.ReadKey();
        }

       /* public void isSurgeryValidationChecklistPerformed(Patient patient, Doctor doctor, DateTime date)
        {
            Console.WriteLine($"Appointment cancelled for {patient.Name} with {doctor.Name} on {date}");
            Console.ReadKey();
        }*/
    }  


    class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                // Creating instances of managers
                MedicalRecordManager medicalRecordManager = new MedicalRecordManager();
                AppointmentManager appointmentManager = new AppointmentManager();
                Dictionary<string, Doctor> doctorMap = new Dictionary<string, Doctor>();



                //--> Adding new doctors
                Doctor doctorCardiologist = new Doctor("Dr.Rama", 40, "Cardiologist");
                Doctor doctorPediatrician = new Doctor("Dr.Rani", 35, "Pediatrician");
                Doctor doctorMD = new Doctor("Dr.Santha", 35, "MD");
                doctorMap.Add("Heartissue", doctorCardiologist);
                doctorMap.Add("Fracture", doctorPediatrician);
                doctorMap.Add("Fever", doctorMD);

                //--> Registering new patients 
                //--> perform hand sanitization and Registering new patients (offline)
                medicalRecordManager.RegisterNewPatient("siri", 5, "Fever");
                medicalRecordManager.RegisterNewPatient("varu", 15, "Fracture");
                medicalRecordManager.RegisterNewPatient("hema", 20, "Heartissue");

                // Displaying patient details
                medicalRecordManager.DisplayPatientsDetails();

                //--> Scheduling appointments
                int i = 1;
                foreach (Patient patient in medicalRecordManager.patients)
                {
                    if (doctorMap.ContainsKey(patient.Condition))
                    {
                        appointmentManager.ScheduleAppointment(patient, doctorMap[patient.Condition], DateTime.Now.AddDays(3));

                        //--> Before doctor appointment perform hand sanitization
                        SaftyAndHygiene saftyAndHygiene = new SaftyAndHygiene();
                        saftyAndHygiene.performHandSanitization(patient, doctorMap[patient.Condition]);

                        // --> patitent visits the doctor and finds the root-cause

                        //--> Doctor suggest isSurgeryRequired or not ?
                        bool isSurgeryRequired = i % 2 == 0;
                        i++;// Set to true if surgery is required
                        if (isSurgeryRequired)
                        {
                            Console.WriteLine($"Surgery required. Please follow required details....");
                            saftyAndHygiene.performSanitizationForSurgery(patient, doctorMap[patient.Condition]);
                            //-->> surgeryChecklist (verify patient details,verify the medical records &
                            //-->>Allocate the doctor& Assistent staff for surgery,prepare required equipents
                            saftyAndHygiene.surgeryChecklist(patient, doctorMap[patient.Condition]);

                            //--> Perforform Surgery
                            Console.WriteLine($"Surgery Completed....");

                            Console.WriteLine($"Follow doctor advice....");
                            Console.WriteLine($"Happy Discharge....!!!");

                            //--> Doctor prescription
                            //-->> Discharge
                        }
                        else
                        {
                            // Pfor non-surgical procedure
                            Console.WriteLine($"Surgery not required. Please follow doctor prescription....");
                        }

                    }
                    else
                    {
                        throw new Exception($"No doctor found for condition: {patient.Condition}");
                    }
                }


                // Canceling appointments
                foreach (Patient patient in medicalRecordManager.patients)
                {
                    appointmentManager.cancelAppointment(patient, doctorMap[patient.Condition], DateTime.Now.AddDays(5));
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }
}

